from flask import Flask, request, jsonify
 from flask_cors import CORS  # Import de Flask-CORS
import openai
 import os
# Initialisation de Flask
CORS(app)  # üî• Active CORS sur toutes les routes
# Configuration de l'API OpenAI
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
# D√©finition du system prompt
 SYSTEM_PROMPT = (
     """Tu es un assistant con√ßu pour aider les personnes autistes Asperger √† mieux comprendre les situations sociales d‚Äôun point de vue neurotypique.
     
 Ton objectif est d‚Äôexpliquer clairement les sous-entendus, attentes et r√©actions sociales de mani√®re fluide et naturelle. √âvite d'√©crire trop, fais complet, mais le plus court possible tout en restant clair. N'h√©site pas √† structurer ta r√©ponse en revenant √† la ligne avec des alin√©as et des points.
 **R√®gle importante :** Tu ne dois **en aucun cas** r√©pondre √† une question qui n‚Äôest pas li√©e √† ton r√¥le. Si l‚Äôutilisateur pose une question hors sujet, r√©ponds simplement :  
 *"Je suis ici pour t‚Äôaider √† comprendre les interactions sociales. Peux-tu me d√©crire une situation que tu aimerais clarifier ?"*
 M√©thodologie :
     - **Clarifier la demande** : Si la situation est floue ou incompl√®te, pose des questions avant de r√©pondre.
     - **R√©pondre de mani√®re fluide et engageante** : Pas de structure rigide, utilise un ton conversationnel et adapt√© √† l‚Äôutilisateur.
     - **Expliquer le point de vue neurotypique** : D√©cris comment une personne neurotypique per√ßoit la situation et pourquoi.
     - **Aider √† interpr√©ter les signaux sociaux** : Mets en √©vidence les implicites, le langage non verbal et les attentes cach√©es.
     - **Proposer des solutions adapt√©es** : Sugg√®re des strat√©gies claires et accessibles, sans jugement.
 
 Exemple :
 Utilisateur : ‚ÄúMon meilleur ami ne me parle plus.‚Äù
 Chatbot : ‚ÄúJe comprends que √ßa puisse √™tre stressant. Il ne r√©pond plus du tout, ou seulement moins que d‚Äôhabitude ? Il s‚Äôest pass√© quelque chose r√©cemment entre vous ?‚Äù"
 ""
 "(Si l‚Äôutilisateur donne plus de d√©tails, continue la discussion naturellement en expliquant les raisons possibles et en proposant des solutions adapt√©es.)
 """
 )
# Dictionnaire pour stocker l'historique des conversations (non persistant)
 user_histories = {}

# üîπ Route OPTIONS pour √©viter les erreurs CORS (pr√©-v√©rifications navigateur)
 @app.route('/chat', methods=['OPTIONS'])
 def preflight():
     response = jsonify({"message": "Pr√©-v√©rification CORS accept√©e."})
     response.headers.add("Access-Control-Allow-Origin", "*")
     response.headers.add("Access-Control-Allow-Methods", "POST, OPTIONS")
     response.headers.add("Access-Control-Allow-Headers", "Content-Type")
     return response, 200

@app.route('/chat', methods=['POST'])
 def chat():
     """
     API pour interagir avec le chatbot.
     Attend une requ√™te POST avec un JSON contenant {"user_id": "123", "message": "Texte de l'utilisateur"}
     Retourne la r√©ponse du chatbot et met √† jour l'historique.
     """

         data = request.get_json()
     user_id = data.get("user_id")
     user_message = data.get("message")

         if not user_id or not user_message:
         return jsonify({"error": "user_id et message sont requis"}), 400
 
     # Initialiser l'historique de l'utilisateur s'il n'existe pas encore
     if user_id not in user_histories:
         user_histories[user_id] = [{"role": "system", "content": SYSTEM_PROMPT}]
 
     # Ajouter le message utilisateur √† l'historique
     user_histories[user_id].append({"role": "user", "content": user_message})
 
     try:
         # Envoyer l'historique √† OpenAI
         response = client.chat.completions.create(
             model="gpt-4",
             messages=user_histories[user_id]

                   )
 
         # R√©cup√©rer la r√©ponse de l'assistant
         assistant_message = response.choices[0].message.content
 
         # Ajouter la r√©ponse de l'assistant √† l'historique
         user_histories[user_id].append({"role": "assistant", "content": assistant_message})
 
         return jsonify({"reply": assistant_message})
 
     except Exception as e:
         return jsonify({"error": str(e)}), 500
 
 # Lancer l'API Flask
 if __name__ == '__main__':
     app.run(debug=True, host="0.0.0.0", port=5000)
